const { expectEvent, expectRevert } = require('@openzeppelin/test-helpers')
const { DEBT_CREDIT_EVENT_ROLE } = require('../utils')
const {
  expectRevertCustomError
} = require('../../openzeppelin-contracts-upgradeable/test/helpers/customError.js')
const { should } = require('chai').should()

function CreditEventsModuleCommon (admin, attacker) {
  context('AdminSetCreditEvents', function () {
    it('testAdminCanSetCreditEvents', async function () {
      // Arrange
      (await this.cmtat.creditEvents()).flagDefault.should.equal(false);
      (await this.cmtat.creditEvents()).flagRedeemed.should.equal(false);
      (await this.cmtat.creditEvents()).rating.should.equal('')

      // Act
      await this.cmtat.connect(this.admin).setCreditEvents(true, true, 'B++');

      // Assert
      (await this.cmtat.creditEvents()).flagDefault.should.equal(true);
      (await this.cmtat.creditEvents()).flagRedeemed.should.equal(true);
      (await this.cmtat.creditEvents()).rating.should.equal('B++')
    })

    it('testAdminCanSetFlagDefault', async function () {
      // Arrange
      (await this.cmtat.creditEvents()).flagDefault.should.equal(false)
      // Act
      this.logs = await this.cmtat.connect(this.admin).setFlagDefault(true);
      // Assert
      (await this.cmtat.creditEvents()).flagDefault.should.equal(true)
      expectEvent(this.logs, 'FlagDefault', {
        newFlagDefault: true
      })
    })

    it('testAdminCanNotSetFlagDefaultWithTheSameValue', async function () {
      // Act + Assert
      await expectRevertCustomError(
        this.cmtat.connect(this.admin).setFlagDefault(await this.cmtat.creditEvents().flagDefault),
        'CMTAT_DebtModule_SameValue',
        []
      )
    })

    it('testAdminCanSetFlagRedeemed', async function () {
      // Arrange
      (await this.cmtat.creditEvents()).flagRedeemed.should.equal(false)
      // Act
      this.logs = await this.cmtat.connect(this.admin).setFlagRedeemed(true);
      // Assert
      (await this.cmtat.creditEvents()).flagRedeemed.should.equal(true)
      expectEvent(this.logs, 'FlagRedeemed', {
        newFlagRedeemed: true
      })
    })

    it('testAdminCanNotSetFlagRedeemedWithTheSameValue', async function () {
      // Act + Assert
      await expectRevertCustomError(
        this.cmtat.setFlagRedeemed(
          await this.cmtat.connect(this.admin).creditEvents().flagRedeemed
        ),
        'CMTAT_DebtModule_SameValue',
        []
      )
    })

    it('testAdminCanSetRating', async function () {
      // Arrange
      (await this.cmtat.creditEvents()).rating.should.equal('')
      // Act
      this.logs = await this.cmtat.connect(this.admin).setRating('B++');
      // Assert
      (await this.cmtat.creditEvents()).rating.should.equal('B++')
      expectEvent(this.logs, 'Rating', {
        newRatingIndexed: web3.utils.sha3('B++'),
        newRating: 'B++'
      })
    })
  })

  context('NonAdminCannotSetDebt', function () {
    it('testCannotNonAdminSetCreditEvents', async function () {
      // Act
      await expectRevertCustomError(
        this.cmtat.connect(this.attacker).setCreditEvents(true, true, 'B++'),
        'AccessControlUnauthorizedAccount',
        [attacker, DEBT_CREDIT_EVENT_ROLE]
      )
    })

    it('testCannotNonAdminSetFlagDefault', async function () {
      // Act
      await expectRevertCustomError(
        this.cmtat.connect(this.attacker).setFlagDefault(true),
        'AccessControlUnauthorizedAccount',
        [attacker, DEBT_CREDIT_EVENT_ROLE]
      )
    })

    it('testCannotNonAdminSetFlagRedeemed', async function () {
      // Act
      await expectRevertCustomError(
        this.cmtat.connect(this.attacker).setFlagRedeemed(true),
        'AccessControlUnauthorizedAccount',
        [attacker, DEBT_CREDIT_EVENT_ROLE]
      )
    })

    it('testCannotNonAdminSetRating', async function () {
      // Act
      await expectRevertCustomError(
        this.cmtat.connect(this.attacker).setRating('B++'),
        'AccessControlUnauthorizedAccount',
        [attacker, DEBT_CREDIT_EVENT_ROLE]
      )
    })
  })
}
module.exports = CreditEventsModuleCommon
